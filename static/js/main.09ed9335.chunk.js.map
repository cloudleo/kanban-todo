{"version":3,"sources":["Component/Column.jsx","App.js","serviceWorker.js","index.js"],"names":["Column","props","handleDelete","handleChange","name","index","handleClick","styles","cards","firstIndex","lastIndex","className","style","map","el","i","key","datacindex","dataindex","onClick","text","App","e","column","currentTarget","getAttribute","value","window","prompt","columns","state","push","setState","indexColumn","temp","splice","data","prevProps","localStorage","setItem","JSON","stringify","this","React","Component","Boolean","location","hostname","match","Data","getItem","parse","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gPAGe,SAASA,EAAOC,GAAO,IAE7BC,EAA8FD,EAA9FC,aAAcC,EAAgFF,EAAhFE,aAAcC,EAAkEH,EAAlEG,KAAMC,EAA4DJ,EAA5DI,MAAOC,EAAqDL,EAArDK,YAAaC,EAAwCN,EAAxCM,OAAQC,EAAgCP,EAAhCO,MAAOC,EAAyBR,EAAzBQ,WAAYC,EAAaT,EAAbS,UACzF,OACC,yBAAKC,UAAU,UACb,yBAAKC,MAAOL,EAAQI,UAAU,SAC7B,4BAAKP,IAEN,yBAAKO,UAAU,SAEfH,EAAMK,KAAI,SAACC,EAAGC,GAAJ,OACR,yBAAKJ,UAAU,OAAOK,IAAG,cAASD,IAC/BN,EAA0H,KAA7G,0BAAME,UAAU,QAAQP,KAAK,OAAOa,WAAYZ,EAAQa,UAAWH,EAAGI,QAAShB,GAA/E,KACf,2BAAIW,EAAGM,MACLV,EAAoH,KAAxG,0BAAMC,UAAU,QAAQP,KAAK,QAAQa,WAAYZ,EAAOa,UAAWH,EAAGI,QAAShB,GAA/E,KACd,0BAAMQ,UAAU,SAASM,WAAYZ,EAAOa,UAAWH,EAAGI,QAASjB,GAAnE,UAKH,4BAAQe,WAAYZ,EAAOc,QAASb,GAApC,iB,IClBiBe,E,kDACnB,WAAYpB,GAAO,IAAD,8BAChB,cAAMA,IAWRK,YAAc,SAACgB,GACb,IAAIC,EAASD,EAAEE,cAAcC,aAAa,cACpCC,EAAQC,OAAOC,OAAO,yBACxBC,EAAU,EAAKC,MAAMD,QACzBA,EAAQN,GAAQf,MAAMuB,KAAK,CAACX,KAAMM,IAClCA,GAAS,EAAKM,SAAS,CACrBH,aAlBc,EAuBlB1B,aAAe,SAACmB,GACd,IAAII,EAAQJ,EAAEE,cAAcC,aAAa,QACrCQ,GAAeX,EAAEE,cAAcC,aAAa,cAC5CpB,GAASiB,EAAEE,cAAcC,aAAa,aACtCI,EAAU,EAAKC,MAAMD,QAErBK,EAAOL,EAAQI,GAAazB,MAAMH,GACzB,SAAVqB,GACDG,EAAQI,GAAazB,MAAM2B,OAAO9B,EAAM,GACxCwB,EAAQI,EAAc,GAAGzB,MAAMuB,KAAKG,KAGpCL,EAAQI,GAAazB,MAAM2B,OAAO9B,EAAM,GACxCwB,EAAQI,EAAc,GAAGzB,MAAMuB,KAAKG,IAEtC,EAAKF,SAAS,CACZH,aAvCc,EA2ClB3B,aAAe,SAACoB,GACd,IAAIW,GAAeX,EAAEE,cAAcC,aAAa,cAC5CpB,GAASiB,EAAEE,cAAcC,aAAa,aACtCI,EAAU,EAAKC,MAAMD,QACzBA,EAAQI,GAAazB,MAAM2B,OAAO9B,EAAM,GACxC,EAAK2B,SAAS,CACZH,aA/CF,EAAKC,MAAQ,CACXD,QAAS5B,EAAMmC,MAHD,E,+DAQCC,GACfV,OAAOW,aAAaC,QAAQ,OAAQC,KAAKC,UAAUC,KAAKZ,MAAMD,Y,+BA4CzD,IAAD,OACN,OACE,yBAAKlB,UAAU,OACV+B,KAAKZ,MAAMD,QAAQhB,KAAI,SAACC,EAAGT,GAAJ,OACtB,kBAACL,EAAD,eAAQK,MAAOA,EACTW,IAAG,oBAAeX,GAClBH,aAAc,EAAKA,aACnBI,YAAa,EAAKA,YAClBH,aAAc,EAAKA,cACfW,Y,GA/DW6B,IAAMC,WCOnBC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCVN,IAAIC,EAAO,CACV,CACCxC,YAAY,EACZF,OAAQ,CAAC,gBAAmB,WAC5BH,KAAM,SACNI,MAAO,CACN,CACCY,KAAM,kBAEP,CACCA,KAAM,mBAIT,CACCb,OAAQ,CAAC,gBAAmB,WAC5BH,KAAM,MACNI,MAAO,CACN,CACCY,KAAM,cAEP,CACCA,KAAM,gBAIT,CACCb,OAAQ,CAAC,gBAAmB,WAC5BH,KAAM,SACNI,MAAO,CACN,CACCY,KAAM,iBAEP,CACCA,KAAM,mBAIT,CACCV,WAAW,EACXH,OAAQ,CAAC,gBAAmB,WAC5BH,KAAM,SACNI,MAAO,CACN,CACCY,KAAM,iBAEP,CACCA,KAAM,oBAMPO,OAAOW,aAAaY,QAAQ,UAC9BD,EAAOT,KAAKW,MAAMxB,OAAOW,aAAaY,QAAQ,UAE/CE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,CAAKlB,KAAMa,KAEbM,SAASC,eAAe,SD+DpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.09ed9335.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport default function Column(props){\n\n\tconst { handleDelete, handleChange, name, index, handleClick, styles, cards, firstIndex, lastIndex} = props;\n\treturn (\n\t\t<div className=\"Column\">\n\t\t \t<div style={styles} className=\"title\">\n\t\t \t\t<h1>{name}</h1>\n\t\t \t</div>\n\t\t \t<div className=\"cards\">\n\t\t \t{\t\n\t\t\t\tcards.map((el,i) => (\n\t\t \t\t\t<div className=\"Card\" key={`key=${i}`}>\n\t\t\t\t \t\t{!firstIndex ? <span className=\"lspan\" name=\"left\" datacindex={index}  dataindex={i} onClick={handleChange}>&#x3C;</span> : null}\n\t\t \t\t\t\t<p>{el.text}</p>\n\t\t \t\t\t\t{!lastIndex ? <span className=\"rspan\" name=\"right\" datacindex={index} dataindex={i} onClick={handleChange}>></span> : null}\n\t\t \t\t\t\t<span className=\"delete\" datacindex={index} dataindex={i} onClick={handleDelete}>x</span>\n\t\t \t\t\t</div>\t\n\t\t \t\t))\n\t\t \t}\n\t\t \t</div>\n\t\t \t<button datacindex={index} onClick={handleClick}>+ Add a card</button>\n\t \t</div>\n  \t);\n}\n\t\n","import React from 'react';\nimport './App.css';\nimport Column from './Component/Column';\n\n\nexport default class App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      columns: props.data\n    }\n  }\n\n\n  componentDidUpdate(prevProps) {\n      window.localStorage.setItem(\"data\", JSON.stringify(this.state.columns));\n  }\n\n  handleClick = (e) => {\n    let column = e.currentTarget.getAttribute(\"datacindex\");\n    const value = window.prompt(\" Add card description\");\n    let columns = this.state.columns;\n    columns[column].cards.push({text: value});\n    value && this.setState({\n      columns,\n    });\n\n  }  \n\n  handleChange = (e) => {\n    let value = e.currentTarget.getAttribute(\"name\");\n    let indexColumn = +e.currentTarget.getAttribute(\"datacindex\");\n    let index = +e.currentTarget.getAttribute(\"dataindex\");\n    let columns = this.state.columns;\n\n    let temp = columns[indexColumn].cards[index];\n    if(value === \"left\"){\n      columns[indexColumn].cards.splice(index,1);\n      columns[indexColumn - 1].cards.push(temp);\n\n    }else{\n      columns[indexColumn].cards.splice(index,1);\n      columns[indexColumn + 1].cards.push(temp);\n    }\n    this.setState({\n      columns,\n    })    \n  }\n\n  handleDelete = (e) => {\n    let indexColumn = +e.currentTarget.getAttribute(\"datacindex\");\n    let index = +e.currentTarget.getAttribute(\"dataindex\");\n    let columns = this.state.columns;\n    columns[indexColumn].cards.splice(index,1);\n    this.setState({\n      columns,\n    })     \n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n        {  this.state.columns.map((el,index) => (\n            <Column index={index} \n                  key={`Columnkey=${index}`} \n                  handleDelete={this.handleDelete}\n                  handleClick={this.handleClick} \n                  handleChange={this.handleChange} \n                  {...el} \n\n            />\n          ))\n        }\n      </div>\n    );\n  }\n}\n\n\n// 20 mill used carss\n\n//15 fields for vehicle\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nlet Data = [\n\t{\t\n\t\tfirstIndex: true,\n\t\tstyles: {\"backgroundColor\": \"#8E6E95\"},\n\t\tname: \"Winnie\",\n\t\tcards: [\n\t\t\t{\n\t\t\t\ttext: \" text 1 winnie\"\t\n\t\t\t},\n\t\t\t{\n\t\t\t\ttext: \"text 2 winnie\"\t\n\t\t\t}\n\t\t]\n\t},\n\t{   \n\t\tstyles: {\"backgroundColor\": \"#39A59C\"},\n\t\tname: \"Bob\",\n\t\tcards: [\n\t\t\t{\n\t\t\t\ttext: \"text 1 Bob\"\t\n\t\t\t},\n\t\t\t{\n\t\t\t\ttext: \"text 2 Bob\"\t\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tstyles: {\"backgroundColor\": \"#344759\"},\n\t\tname: \"Thomas\",\n\t\tcards: [\n\t\t\t{\n\t\t\t\ttext: \"text 1 Thomas\"\t\n\t\t\t},\n\t\t\t{\n\t\t\t\ttext: \"text 2 Thomas\"\t\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tlastIndex: true,\n\t\tstyles: {\"backgroundColor\": \"#E8741E\"},\n\t\tname: \"George\",\n\t\tcards: [\n\t\t\t{\n\t\t\t\ttext: \"text 1 George\"\t\n\t\t\t},\n\t\t\t{\n\t\t\t\ttext: \"text 2 George\"\t\n\t\t\t}\n\t\t]\n\t}\t\t\t\n]\n\nif(window.localStorage.getItem(\"data\")){\n\tData = JSON.parse(window.localStorage.getItem(\"data\"));\n}\nReactDOM.render(\n  <React.StrictMode>\n    <App data={Data}/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}